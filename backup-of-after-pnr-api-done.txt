const { ObjectId, ObjectId2 } = require('mongodb');
const express = require('express');
const {dbConnect, dbConnect2} = require('../server/mongodb/mongodb')
//const dbConnect2 = require('../server/mongodb/mongodb')

const mongoDB = require('mongodb');

const cors = require('cors');

const app = express();

app.use(cors());
app.use(express.json());

 

app.get('/', async (req, resp) => {
    let data = await dbConnect();
    data = await data.find().toArray();
    resp.send(data)
    //resp.json({message: "Hello from Server"});
    
})



app.get('/:_id', async (req, resp) => {
    try {
        const data = await dbConnect();
        //const collection = data.collection('traindata'); // Replace with your actual collection name
        
        // Convert the string _id to ObjectId, assuming you're using ObjectId as the type for _id
        const objectId = new ObjectId(req.params._id);

        const result = await data.find({ _id: objectId }).toArray();

        if (result.length > 0) {
            resp.send(result[0]);
        } else {
            resp.status(404).send({ error: "Document not found" });
        }
    } catch (error) {
        console.error("Error retrieving document:", error);
        resp.status(500).send({ error: "Internal Server Error" });
    }
});
 


app.post('/post', async (req, resp) => {
    let data = await dbConnect();
    let result = await data.insertOne(req.body);
    resp.send(result);
})

// app.put('/:_id', async (req, resp) => {
//     let data = await dbConnect();
//     let result = await data.updateOne(
//         {_id: req.params.id},
//         {$set: req.body}
//     )
//     resp.send({result: 'Updated'})
// })

// app.put("/:_id",  async (req, resp) => {
//     console.log("------>" , req.body)
//     let data = await dbConnect();
//     let result =  await data.updateOne(
//         // {TrainName: "ds"},
//         //  { $set : {coach: "mera coach"} }
//         {id: req.body._id},
//         { $set : req.body }
//     )
//     resp.send({result: "updated"})
// })

//this code is for update data through postmand to mongodb
// app.put("/:_id", async (req, resp) => {
//     console.log(req.body)
//     let data = await dbConnect();
//     let result = await data.updateOne(
//         {id: req.body._id },  //condition means kiske through update krna chahte ho
//         { $set : req.body}
//     )
//     resp.send({result: "Updated"})
// })


app.put("/:id", async (req, resp) => {
    console.log(req.body)
    let data = await dbConnect();
    let result = await data.updateOne(
        {_id: req.params.id },  //condition means kiske through update krna chahte ho
        { $set : req.body}
    )
    resp.send({result: "Updated"})
})


app.delete("/:id", async (req, resp) => {
    console.log(req.params.id)
    const data = await dbConnect();
    const result = await data.deleteOne({_id: new mongoDB.ObjectId(req.params.id)})
    resp.send(result)
})


app.get('/post/pnr/', async (req, resp) => {
    let data = await dbConnect2();
    data = await data.find().toArray();
    resp.send(data)
    //resp.json({message: "Hello from Server"});
    console.log(data)
})
app.get('/post/pnr/:_id', async (req, resp) => {
    try {
        const data = await dbConnect2();
        //const collection = data.collection('traindata'); // Replace with your actual collection name
        
        // Convert the string _id to ObjectId, assuming you're using ObjectId as the type for _id
        const objectId = new ObjectId(req.params._id);

        const result = await data.find({ _id: objectId }).toArray();

        if (result.length > 0) {
            resp.send(result[0]);
        } else {
            resp.status(404).send({ error: "Document not found" });
        }
    } catch (error) {
        console.error("Error retrieving document:", error);
        resp.status(500).send({ error: "Internal Server Error" });
    }
});
 



// app.get(`/pnrcheck/:_id`, async (req, resp) => {
//     try {
//         const data2 = await dbConnect2();
    
//         // Convert the string _id to ObjectId, assuming you're using ObjectId as the type for _id
//         const objectId2 = new ObjectId(req.params._id);

//         const result2 = await data2.find({ _id: objectId2 }).toArray();

   
//     if (result2.length > 0) {
//         resp.send(result2[0]);
//     } else {
//         resp.status(404).send({ error: "Document not found" });
//     }
// } catch (error) {
//     console.error("Error retrieving document:", error);
//     resp.status(500).send({ error: "Internal Server Error" });
// }
// });


app.listen(8000, () => {
    console.log("Server is running on port 8000");
})